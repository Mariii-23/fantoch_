use crate::client::key_gen::{KeyGen, KeyGenState};
use crate::command::Command;
use crate::id::{RiflGen, ShardId};
use crate::kvs::{KVOp, Value};
use crate::log;
use crate::HashMap;
use rand::{distributions::Alphanumeric, Rng};
use serde::{Deserialize, Serialize};
use std::iter;

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub struct Workload {
    /// number of shards accessed per command
    shards_per_command: usize,
    /// number of keys in each shard accessed by the command
    keys_per_shard: usize,
    // key generator
    key_gen: KeyGen,
    /// number of commands to be submitted in this workload
    commands_per_client: usize,
    /// size of payload in command (in bytes)
    payload_size: usize,
    /// number of commands already issued in this workload
    command_count: usize,
}

impl Workload {
    pub fn new(
        shards_per_command: usize,
        keys_per_shard: usize,
        key_gen: KeyGen,
        commands_per_client: usize,
        payload_size: usize,
    ) -> Self {
        Self {
            shards_per_command,
            keys_per_shard,
            key_gen,
            commands_per_client,
            payload_size,
            command_count: 0,
        }
    }

    /// Returns the number of shards accessed by commands generated by this
    /// workload.
    pub fn shards_per_command(&self) -> usize {
        self.shards_per_command
    }

    /// Returns the number of keys in each shard accessed by commands generated
    /// by this workload.
    pub fn keys_per_shard(&self) -> usize {
        self.keys_per_shard
    }

    /// Returns the conflict rate to be generated by this workload.
    pub fn key_gen(&self) -> KeyGen {
        self.key_gen
    }

    /// Returns the total number of commands to be generated by this workload.
    pub fn commands_per_client(&self) -> usize {
        self.commands_per_client
    }

    /// Returns the payload size of the commands to be generated by this
    /// workload.
    pub fn payload_size(&self) -> usize {
        self.payload_size
    }

    /// Generate the next command.
    pub fn next_cmd(
        &mut self,
        rifl_gen: &mut RiflGen,
        key_gen_state: &mut KeyGenState,
    ) -> Option<Command> {
        // check if we should generate more commands
        if self.command_count < self.commands_per_client {
            if self.command_count % 1000 == 0 {
                log!(
                    "client {:?}: {} of {}",
                    rifl_gen.source(),
                    self.command_count,
                    self.commands_per_client
                );
            }

            // increment command count
            self.command_count += 1;
            // generate new command
            Some(self.gen_cmd(rifl_gen, key_gen_state))
        } else {
            log!("client {:?} is done!", rifl_gen.source());
            None
        }
    }

    /// Returns the number of commands already issued.
    pub fn issued_commands(&self) -> usize {
        self.command_count
    }

    /// Returns a boolean indicating whether the workload has finished, i.e. all
    /// commands have been issued.
    pub fn finished(&self) -> bool {
        self.command_count == self.commands_per_client
    }

    /// Generate a command.
    fn gen_cmd(
        &mut self,
        rifl_gen: &mut RiflGen,
        key_gen_state: &mut KeyGenState,
    ) -> Command {
        // generate rifl
        let rifl = rifl_gen.next_id();

        // generate all the key-value pairs
        let mut ops = HashMap::new();
        for shard_id in 0..self.shards_per_command {
            let shard_id = shard_id as ShardId;
            for _ in 0..self.keys_per_shard {
                let key = key_gen_state.gen_cmd_key();
                let value = self.gen_cmd_value();
                ops.insert(key, (KVOp::Put(value), shard_id));
            }
        }

        // create commadn
        Command::new(rifl, ops)
    }

    /// Generate a command payload with the payload size provided.
    fn gen_cmd_value(&self) -> Value {
        let mut rng = rand::thread_rng();
        iter::repeat(())
            .map(|_| rng.sample(Alphanumeric))
            .take(self.payload_size)
            .collect()
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::client::key_gen::CONFLICT_COLOR;
    use crate::kvs::KVOp;

    #[test]
    fn gen_cmd_key() {
        // create rilf gen
        let client_id = 1;
        let mut rifl_gen = RiflGen::new(client_id);

        // general config
        let shards_per_command = 1;
        let keys_per_shard = 1;
        let total_commands = 100;
        let payload_size = 100;

        // create conflicting workload
        let conflict_rate = 100;
        let key_gen = KeyGen::ConflictRate { conflict_rate };
        let mut key_gen_state = key_gen.initial_state(client_id);
        let mut workload = Workload::new(
            shards_per_command,
            keys_per_shard,
            key_gen,
            total_commands,
            payload_size,
        );
        let command = workload.gen_cmd(&mut rifl_gen, &mut key_gen_state);
        assert_eq!(command.keys().collect::<Vec<_>>(), vec![CONFLICT_COLOR]);

        // create non-conflicting workload
        let conflict_rate = 0;
        let key_gen = KeyGen::ConflictRate { conflict_rate };
        let mut key_gen_state = key_gen.initial_state(client_id);
        let mut workload = Workload::new(
            shards_per_command,
            keys_per_shard,
            key_gen,
            total_commands,
            payload_size,
        );
        let command = workload.gen_cmd(&mut rifl_gen, &mut key_gen_state);
        assert_eq!(command.keys().collect::<Vec<_>>(), vec!["1"]);
    }

    #[test]
    fn next_cmd() {
        // create rilf gen
        let client_id = 1;
        let mut rifl_gen = RiflGen::new(client_id);

        // general config
        let shards_per_command = 1;
        let keys_per_shard = 1;
        let total_commands = 10000;
        let payload_size = 10;

        // create workload
        let conflict_rate = 100;
        let key_gen = KeyGen::ConflictRate { conflict_rate };
        let mut key_gen_state = key_gen.initial_state(client_id);
        let mut workload = Workload::new(
            shards_per_command,
            keys_per_shard,
            key_gen,
            total_commands,
            payload_size,
        );

        // check total and issued commands
        assert_eq!(workload.commands_per_client(), total_commands);
        assert_eq!(workload.issued_commands(), 0);

        // the first `total_commands` commands are `Some`
        for i in 1..=total_commands {
            if let Some(cmd) =
                workload.next_cmd(&mut rifl_gen, &mut key_gen_state)
            {
                // since there's a single shard, keys should be on shard 0
                let shard = 0;
                let (key, value) = cmd.into_iter(shard).next().unwrap();
                // since the conflict is 100, the key should be `CONFLICT_COLOR`
                assert_eq!(key, CONFLICT_COLOR);
                // check that the value size is `payload_size`
                if let KVOp::Put(payload) = value {
                    assert_eq!(payload.len(), payload_size);
                } else {
                    panic!("workload should generate PUT commands");
                }

                // check total and issued commands
                assert_eq!(workload.commands_per_client(), total_commands);
                assert_eq!(workload.issued_commands(), i);
            } else {
                panic!("there should be a next command in this workload");
            }
        }

        // check the workload is finished
        assert!(workload.finished());

        // after this, no more commands are generated
        for _ in 1..=10 {
            assert!(workload
                .next_cmd(&mut rifl_gen, &mut key_gen_state)
                .is_none());
        }

        // check the workload is still finished
        assert!(workload.finished());
    }

    #[test]
    fn conflict_rate() {
        for conflict_rate in vec![1, 2, 10, 50] {
            // create rilf gen
            let client_id = 1;
            let mut rifl_gen = RiflGen::new(client_id);

            // total commands
            let shards_per_command = 1;
            let keys_per_shard = 1;
            let total_commands = 100000;
            let payload_size = 0;

            // create workload
            let key_gen = KeyGen::ConflictRate { conflict_rate };
            let mut key_gen_state = key_gen.initial_state(client_id);
            let mut workload = Workload::new(
                shards_per_command,
                keys_per_shard,
                key_gen,
                total_commands,
                payload_size,
            );

            // count conflicting commands
            let mut conflict_color_count = 0;

            while let Some(cmd) =
                workload.next_cmd(&mut rifl_gen, &mut key_gen_state)
            {
                // since there's a single shard, keys should be on shard 0
                let shard = 0;
                // get command key and check if it's conflicting
                let (key, _) = cmd.into_iter(shard).next().unwrap();
                if key == CONFLICT_COLOR {
                    conflict_color_count += 1;
                }
            }

            // compute percentage of conflicting commands
            let percentage =
                (conflict_color_count * 100) as f64 / total_commands as f64;
            assert_eq!(percentage.round() as usize, conflict_rate);
        }
    }
}
